turtleDoc              ::=  statement*
statement              ::=  directive | triples '.'
directive              ::=  prefixID | base | sparqlPrefix | sparqlBase
prefixID               ::=  '@prefix' PNAME_NS IRIREF '.'
base                   ::=  '@base' IRIREF '.'
sparqlBase             ::=  "BASE" IRIREF
sparqlPrefix           ::=  "PREFIX" PNAME_NS IRIREF
triples                ::=  subject predicateObjectList | blankNodePropertyList predicateObjectList?
predicateObjectList    ::=  verb objectList (';' (verb objectList)?)*
objectList             ::=  object (',' object)*
verb                   ::=  predicate | 'a'
subject                ::=  iri | BlankNode | collection
predicate              ::=  iri
object                 ::=  iri | BlankNode | collection | blankNodePropertyList | literal
literal                ::=  RDFLiteral | NumericLiteral | BooleanLiteral
blankNodePropertyList  ::=  '[' predicateObjectList ']'
collection             ::=  '(' object* ')'
NumericLiteral         ::=  INTEGER | DECIMAL | DOUBLE
RDFLiteral             ::=  String (LANGTAG | '^^' iri)?
BooleanLiteral         ::=  'true' | 'false'
String                 ::=  STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
iri                    ::=  IRIREF | PrefixedName
PrefixedName           ::=  PNAME_LN | PNAME_NS
BlankNode              ::=  BLANK_NODE_LABEL | ANON
IRIREF                 ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
PNAME_NS               ::=  PN_PREFIX? ':'
PNAME_LN               ::=  PNAME_NS PN_LOCAL
BLANK_NODE_LABEL       ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
(* below here is done *)
LANGTAG                ::=  #"@[a-zA-Z]+-[a-zA-Z0-9]+"*
INTEGER                ::=  [+-]? [0-9]+
DECIMAL                ::=  #"\+-"? #"[0-9]*\.[0-9]+"
DOUBLE                 ::=  #"\+-"? #"[0-9]+\.[0-9]*" EXPONENT | #"\.[0-9]+" EXPONENT | #"[0-9]+" EXPONENT
EXPONENT               ::=  #"[eE][+-]?[0-9]+"
STRING_LITERAL_QUOTE   ::=  '"' (#"[^\u0022\u005C\u000A\u000D]" | ECHAR | UCHAR)* '"'
STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ( #"[^\u0027\u005C\u000A\u000D]" | ECHAR | UCHAR)* "'"
STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ( #"[^'\\]" | ECHAR | UCHAR))* "'''"
STRING_LITERAL_LONG_QUOTE  ::=  '"""' (('"' | '""')? ( #"[^\"\\]" | ECHAR | UCHAR))* '"\""'
UCHAR                  ::=  #"\\u[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]" | #"\\U[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]"
ECHAR                  ::=  #"\\[tbnrf\"'\\]"
WS                     ::=  #"[\u0020\u0009\u000D\u000A]"
ANON                   ::=  '[' WS* ']'
PN_CHARS_BASE          ::=  #"[A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u10000-\uEFFFF]"
PN_CHARS_U             ::=  PN_CHARS_BASE | '_'
PN_CHARS               ::=  PN_CHARS_U | '-' | #"[0-9\u00B7\u0300-\u036F\u203F-\u2040]"
PN_PREFIX              ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
PN_LOCAL               ::=  (PN_CHARS_U | ':' | #"[0-9]" | PLX ) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX) )?
PLX                    ::=  PERCENT | PN_LOCAL_ESC
PERCENT                ::=  #"%[0-9A-Fa-f][0-9A-Fa-f]"
HEX                    ::=  [0-9] | [A-F] | [a-f]
PN_LOCAL_ESC           ::=  #"\\[_~.\-!$&'()*+,;=/?#@%]"
